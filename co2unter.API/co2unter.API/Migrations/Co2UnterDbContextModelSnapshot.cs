// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using co2unter.API.Infrastructure;

#nullable disable

namespace co2unter.API.Migrations
{
    [DbContext(typeof(Co2UnterDbContext))]
    partial class Co2UnterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("co2unter.API.Infrastructure.Entities.DbGreenArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Area")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<double>("Co2Absorption")
                        .HasColumnType("double precision")
                        .HasColumnName("co2absorption");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_green_areas");

                    b.ToTable("green_areas", (string)null);
                });

            modelBuilder.Entity("co2unter.API.Infrastructure.Entities.DbMassEvent", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("EmmissionT")
                        .HasColumnType("integer")
                        .HasColumnName("emmission_t");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("place");

                    b.HasKey("Id")
                        .HasName("pk_mass_events");

                    b.ToTable("mass_events", (string)null);
                });

            modelBuilder.Entity("co2unter.API.Infrastructure.Entities.DbServiceEmission", b =>
                {
                    b.Property<string>("ServiceType")
                        .HasColumnType("text")
                        .HasColumnName("service_type");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.Property<double>("TotalCO2EmissionsKg")
                        .HasColumnType("double precision")
                        .HasColumnName("total_co2emissions_kg");

                    b.HasKey("ServiceType", "Year")
                        .HasName("pk_service_emissions");

                    b.ToTable("service_emissions", (string)null);
                });

            modelBuilder.Entity("co2unter.API.Infrastructure.Entities.DbTransportEmission", b =>
                {
                    b.Property<string>("TransportType")
                        .HasColumnType("text")
                        .HasColumnName("transport_type");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.Property<double>("TotalCO2EmissionsKg")
                        .HasColumnType("double precision")
                        .HasColumnName("total_co2emissions_kg");

                    b.Property<double>("TotalDistanceKm")
                        .HasColumnType("double precision")
                        .HasColumnName("total_distance_km");

                    b.HasKey("TransportType", "Year")
                        .HasName("pk_transport_emissions");

                    b.ToTable("transport_emissions", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
